
/*
FarmConnect - Single-file React frontend (Tailwind CSS)
- Default export: App component
- Uses Tailwind utility classes for styling (no imports required here)
- Mock data and simulated flows: farmer registration, browse farmers, book a consultation (mock payment), and join a call (simulated)

How to use:
1. Create a new React app (Vite or Create React App).
2. Install and configure Tailwind CSS.
3. Place this file as `src/App.jsx` and start the dev server.

Note: This is a front-end prototype without backend. Replace mock functions with real API calls for production.
*/

import React, { useEffect, useState } from "react";

// Small helper to simulate async API calls
const wait = (ms) => new Promise((res) => setTimeout(res, ms));

// Sample plants for demonstration
const SAMPLE_FARMERS = [
  {
    id: "f1",
    name: "Ramesh Kumar",
    location: "Ghaziabad, UP",
    expertise: ["Tomatoes", "Spinach", "Pest Control"],
    fee: 100,
    rating: 4.7,
    bio: "20 years of vegetable farming. Practical tips on soil & organic pest control.",
  },
  {
    id: "f2",
    name: "Sunita Devi",
    location: "Meerut, UP",
    expertise: ["Orchids", "Houseplants"],
    fee: 150,
    rating: 4.9,
    bio: "Specialist in ornamental plants and low-light houseplants.",
  },
];

function Navbar({ onOpenRegister }) {
  return (
    <nav className="bg-white shadow sticky top-0 z-20">
      <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-green-600 rounded-full flex items-center justify-center text-white font-bold">FC</div>
          <div>
            <div className="font-semibold">FarmConnect</div>
            <div className="text-xs text-gray-500">Farmers + Gardeners — Help, Book, Grow</div>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <button
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:opacity-95"
            onClick={onOpenRegister}
          >
            Register as Farmer
          </button>
        </div>
      </div>
    </nav>
  );
}

function Hero() {
  return (
    <header className="bg-gradient-to-r from-green-50 to-white py-12">
      <div className="max-w-6xl mx-auto px-4 grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-green-800">Connect with real farmers. Grow with confidence.</h1>
          <p className="mt-4 text-gray-600">Book one-to-one guidance from experienced farmers for plant care, soil advice, pest solutions, and seasonal tips.</p>
          <ul className="mt-6 space-y-2 text-gray-700">
            <li>• Farmers earn a side income by sharing practical expertise.</li>
            <li>• Book pay-per-session consultations (call or video).</li>
            <li>• Browse plant-specific experts and community tips.</li>
          </ul>
        </div>
        <div className="p-6 bg-white rounded-xl shadow">
          <div className="text-sm text-gray-500">Quick onboarding</div>
          <div className="mt-4 grid grid-cols-2 gap-4">
            <div className="p-4 border rounded">
              <div className="font-semibold">Find Experts</div>
              <div className="text-xs text-gray-500">Search by plant or problem</div>
            </div>
            <div className="p-4 border rounded">
              <div className="font-semibold">Book Session</div>
              <div className="text-xs text-gray-500">Pay securely & schedule a call</div>
            </div>
            <div className="p-4 border rounded">
              <div className="font-semibold">Get Help</div>
              <div className="text-xs text-gray-500">Step-by-step guidance</div>
            </div>
            <div className="p-4 border rounded">
              <div className="font-semibold">Share & Learn</div>
              <div className="text-xs text-gray-500">Community Q&A</div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

function FarmerCard({ farmer, onBook }) {
  return (
    <div className="bg-white rounded-lg shadow p-4 flex flex-col justify-between">
      <div>
        <div className="flex items-center justify-between">
          <div>
            <div className="font-semibold text-lg">{farmer.name}</div>
            <div className="text-sm text-gray-500">{farmer.location}</div>
          </div>
          <div className="text-right">
            <div className="font-semibold">₹{farmer.fee}</div>
            <div className="text-xs text-gray-500">per session</div>
          </div>
        </div>
        <p className="mt-3 text-sm text-gray-600">{farmer.bio}</p>
        <div className="mt-3 text-xs text-gray-600">Expertise: {farmer.expertise.join(", ")}</div>
      </div>
      <div className="mt-4 flex items-center justify-between">
        <div className="text-sm text-yellow-600">⭐ {farmer.rating}</div>
        <div>
          <button
            onClick={() => onBook(farmer)}
            className="px-3 py-1 bg-green-600 text-white rounded-md text-sm"
          >
            Book
          </button>
        </div>
      </div>
    </div>
  );
}

function FarmerList({ farmers, onBook }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {farmers.map((f) => (
        <FarmerCard key={f.id} farmer={f} onBook={onBook} />
      ))}
    </div>
  );
}

function RegisterFarmerModal({ open, onClose, onSave }) {
  const [form, setForm] = useState({ name: "", location: "", expertise: "", fee: "" });

  useEffect(() => {
    if (!open) setForm({ name: "", location: "", expertise: "", fee: "" });
  }, [open]);

  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black/40 flex items-center justify-center p-4 z-40">
      <div className="bg-white rounded-lg shadow max-w-lg w-full p-6">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold">Register as Farmer</h3>
          <button className="text-gray-500" onClick={onClose}>✕</button>
        </div>
        <div className="mt-4 space-y-3">
          <input className="w-full border rounded px-3 py-2" placeholder="Full name" value={form.name} onChange={(e)=>setForm({...form,name:e.target.value})} />
          <input className="w-full border rounded px-3 py-2" placeholder="Location" value={form.location} onChange={(e)=>setForm({...form,location:e.target.value})} />
          <input className="w-full border rounded px-3 py-2" placeholder="Expertise (comma separated)" value={form.expertise} onChange={(e)=>setForm({...form,expertise:e.target.value})} />
          <input className="w-full border rounded px-3 py-2" placeholder="Fee (₹)" type="number" value={form.fee} onChange={(e)=>setForm({...form,fee:e.target.value})} />
        </div>
        <div className="mt-4 flex justify-end gap-3">
          <button className="px-4 py-2 rounded border" onClick={onClose}>Cancel</button>
          <button className="px-4 py-2 bg-green-600 text-white rounded" onClick={() => {
            const newFarmer = {
              id: "f_" + Date.now(),
              name: form.name || "Anonymous Farmer",
              location: form.location || "Unknown",
              expertise: form.expertise ? form.expertise.split(",").map(s=>s.trim()) : [],
              fee: Number(form.fee) || 100,
              rating: 4.5,
              bio: "Registered via FarmConnect app.",
            };
            onSave(newFarmer);
            onClose();
          }}>Register</button>
        </div>
      </div>
    </div>
  );
}

function BookingModal({ open, farmer, onClose, onConfirm }) {
  const [name, setName] = useState("");
  const [notes, setNotes] = useState("");
  const [processing, setProcessing] = useState(false);

  useEffect(()=>{ if(!open){ setName(""); setNotes(""); setProcessing(false);} },[open]);

  if (!open || !farmer) return null;

  return (
    <div className="fixed inset-0 bg-black/40 flex items-center justify-center p-4 z-40">
      <div className="bg-white rounded-lg shadow max-w-md w-full p-6">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold">Book session with {farmer.name}</h3>
          <button className="text-gray-500" onClick={onClose}>✕</button>
        </div>
        <div className="mt-3 text-sm text-gray-600">Fee: ₹{farmer.fee} per session</div>
        <div className="mt-4 space-y-3">
          <input className="w-full border rounded px-3 py-2" placeholder="Your name" value={name} onChange={(e)=>setName(e.target.value)} />
          <textarea className="w-full border rounded px-3 py-2" rows={3} placeholder="Brief about your issue (plant, problem)" value={notes} onChange={(e)=>setNotes(e.target.value)} />
        </div>
        <div className="mt-4 flex justify-end gap-3">
          <button className="px-4 py-2 rounded border" onClick={onClose}>Cancel</button>
          <button className="px-4 py-2 bg-green-600 text-white rounded" onClick={async ()=>{
            setProcessing(true);
            // Simulate payment processing
            await wait(1000);
            onConfirm({ name, notes, farmer });
            setProcessing(false);
          }}>{processing ? "Processing..." : `Pay & Book (₹${farmer.fee})`}</button>
        </div>
      </div>
    </div>
  );
}

function CallSimulator({ session, onEnd }) {
  if (!session) return null;
  return (
    <div className="fixed bottom-6 right-6 bg-white border shadow rounded-lg p-4 w-80 z-50">
      <div className="flex items-center justify-between">
        <div>
          <div className="font-semibold">Call with {session.farmer.name}</div>
          <div className="text-xs text-gray-500">Topic: {session.notes || 'General guidance'}</div>
        </div>
        <div>
          <button className="px-3 py-1 bg-red-600 text-white rounded" onClick={onEnd}>End</button>
        </div>
      </div>
      <div className="mt-3 text-sm text-gray-600">This simulates a live call. Replace with real WebRTC or telephony integration for production.</div>
    </div>
  );
}

function CommunitySection() {
  const [posts, setPosts] = useState([
    { id: 1, user: "Asha", text: "My basil leaves are turning brown — what should I do?" },
    { id: 2, user: "Rahul", text: "Looking for organic pest control for tomatoes." },
  ]);
  const [text, setText] = useState("");

  const addPost = () => {
    if (!text.trim()) return;
    setPosts([{ id: Date.now(), user: "You", text }, ...posts]);
    setText("");
  };

  return (
    <div className="mt-8 bg-white rounded-lg shadow p-4">
      <h3 className="font-semibold">Community Q&A</h3>
      <div className="mt-3">
        <textarea value={text} onChange={(e)=>setText(e.target.value)} rows={2} className="w-full border rounded px-3 py-2" placeholder="Ask the community or share a tip" />
        <div className="mt-2 flex justify-end">
          <button className="px-3 py-1 bg-green-600 text-white rounded" onClick={addPost}>Post</button>
        </div>
      </div>
      <div className="mt-4 space-y-3">
        {posts.map(p => (
          <div key={p.id} className="p-3 border rounded">
            <div className="text-sm font-semibold">{p.user}</div>
            <div className="text-sm text-gray-700">{p.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default function App() {
  const [farmers, setFarmers] = useState(() => {
    const saved = localStorage.getItem("farmers_demo");
    return saved ? JSON.parse(saved) : SAMPLE_FARMERS;
  });
  const [registerOpen, setRegisterOpen] = useState(false);
  const [bookingFarmer, setBookingFarmer] = useState(null);
  const [bookingOpen, setBookingOpen] = useState(false);
  const [session, setSession] = useState(null);
  const [bookings, setBookings] = useState(() => {
    const saved = localStorage.getItem("bookings_demo");
    return saved ? JSON.parse(saved) : [];
  });

  useEffect(()=>{
    localStorage.setItem("farmers_demo", JSON.stringify(farmers));
  },[farmers]);

  useEffect(()=>{
    localStorage.setItem("bookings_demo", JSON.stringify(bookings));
  },[bookings]);

  const handleSaveFarmer = (f) => {
    setFarmers([f, ...farmers]);
  };

  const handleBook = (farmer) => {
    setBookingFarmer(farmer);
    setBookingOpen(true);
  };

  const confirmBooking = async ({ name, notes, farmer }) => {
    // Simulate server booking and payment verification
    await wait(800);
    const newBooking = {
      id: "b_" + Date.now(),
      user: name || "Guest",
      notes,
      farmerId: farmer.id,
      farmer,
      time: new Date().toISOString(),
    };
    setBookings([newBooking, ...bookings]);

    // Simulate immediate call session start
    setSession(newBooking);
    setBookingOpen(false);
  };

  const endSession = () => {
    setSession(null);
    alert("Session ended. Please rate your experience later.");
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar onOpenRegister={()=>setRegisterOpen(true)} />
      <Hero />

      <main className="max-w-6xl mx-auto px-4 py-8">
        <section>
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-semibold">Available Farmers</h2>
            <div className="text-sm text-gray-600">Tip: Filter by expertise in future versions</div>
          </div>
          <div className="mt-4">
            <FarmerList farmers={farmers} onBook={handleBook} />
          </div>
        </section>

        <section className="mt-8">
          <CommunitySection />
        </section>

        <section className="mt-8">
          <h3 className="text-lg font-semibold">Your Bookings</h3>
          <div className="mt-3 space-y-3">
            {bookings.length === 0 && <div className="text-gray-600">No bookings yet — book a session to start.</div>}
            {bookings.map(b => (
              <div key={b.id} className="p-3 bg-white rounded shadow flex items-center justify-between">
                <div>
                  <div className="font-semibold">With {b.farmer.name}</div>
                  <div className="text-xs text-gray-500">{new Date(b.time).toLocaleString()}</div>
                </div>
                <div>
                  <button className="px-3 py-1 bg-green-600 text-white rounded" onClick={()=>setSession(b)}>Join Call</button>
                </div>
              </div>
            ))}
          </div>
        </section>

        <footer className="mt-12 text-sm text-gray-500 text-center">© FarmConnect Prototype</footer>
      </main>

      <RegisterFarmerModal open={registerOpen} onClose={()=>setRegisterOpen(false)} onSave={handleSaveFarmer} />
      <BookingModal open={bookingOpen} farmer={bookingFarmer} onClose={()=>setBookingOpen(false)} onConfirm={confirmBooking} />
      <CallSimulator session={session} onEnd={endSession} />
    </div>
  );
}
